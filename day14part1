import java.util.*;

public class day14part1 {
    public static void main(String[] args) {

        // declarations
        Scanner sc = new Scanner(System.in);
        Integer[] start = new Integer[2];
        Integer[] end = new Integer[2];
        boolean test = false;
        final int D;
        final int V;
        final int H;
        if (test) {
            D = 503; //494
            V = Math.abs(-10);
            H = 10;
        } else {
            D = 513;
            V = Math.abs(-55);
            H = 170;
        }
        final int S = 500;
        boolean[][] map = new boolean[H][V];
        int SP, FP, SSP, lin, FL, units;
        units = 0;
        // SP & FP - lines starting and finish positions
        // SSP - sand starting position
        // lin - constant array value
        // units of sand
        // FL - falling line
        char direct;
        SSP = D - S;


        // reading / parsing input
        while (true) {
            String nl = sc.nextLine();
            if (nl.isEmpty()) {
                break;
            }
            String[] line = nl.split(" -> ");
            for (int i = 0; i + 1 < line.length; i++) {
                String[] from = line[i].split(",");
                for (int s = 0; s < 2; s++)
                    if (s == 0)
                        start[s] = Math.abs(Integer.parseInt(from[s]) - D);
                    else
                        start[s] = Integer.parseInt(from[s]);
                String[] to = line[i + 1].split(",");
                for (int s = 0; s < 2; s++)
                    if (s == 0)
                        end[s] = Math.abs(Integer.parseInt(to[s]) - D);
                    else
                        end[s] = Integer.parseInt(to[s]);


                // marking rocks
                if (start[0] < end[0]) {
                    SP = start[0];
                    FP = end[0];
                    direct = 'V';
                    lin = start[1];
                } else if (start[0] > end[0]) {
                    SP = end[0];
                    FP = start[0];
                    direct = 'V';
                    lin = start[1];
                } else {
                    if (start[1] < end[1]) {
                        SP = start[1];
                        FP = end[1];
                        direct = 'H';
                        lin = start[0];
                    } else {
                        SP = end[1];
                        FP = start[1];
                        direct = 'H';
                        lin = start[0];
                    }
                }
                if (direct == 'V')              // vertical
                    for (; SP <= FP; SP++)
                        map[lin][SP] = true;
                else                            // horizontal
                    for (; SP <= FP; SP++)
                        map[SP][lin] = true;
            }
        }

        // graphical representation of rocks
//        for (int i = 0; i < map.length; i++) {
//            for (int j = 0; j < map[i].length; j++) {
//                if (i == 0 && j == 0)
//                    System.out.print('R');
//                else if (i == 0 && j == map[i].length - 1)
//                    System.out.print('L');
//                else if (i == 0 && j == SSP)
//                    System.out.print('+');
//                else {
//                    if (map[i][j])
//                        System.out.print('#');
//                    else
//                        System.out.print('.');
//                }
//            }
//            System.out.println();
//        }


        // sand falling implementation
        boolean New = true;
        FL = SSP;
        int level = 0;
        try {
            while (true) {
                if (level == H)
                    break;
                if (New) {
                    FL = SSP;                       // reset to baseline for New unit
                    New = false;
                    level = 0;
                    units++;
                    for (int i = 0; i < map.length; i++) {
                        for (int j = 0; j < map[i].length; j++) {
                            if (i == 0 && j == 0)
                                System.out.print('R');
                            else if (i == 0 && j == map[i].length - 1)
                                System.out.print('L');
                            else if (i == 0 && j == SSP)
                                System.out.print('+');
                            else {
                                if (map[i][j])
                                    System.out.print('#');
                                else
                                    System.out.print('.');
                            }
                        }
                        System.out.println();
                    }
                    System.out.println();
                }
                //System.out.println(level + " " + FL);
                if (!map[level + 1][FL]) {             // go lower when false
                    level++;
                } else {
                    if (!map[level][FL + 1]) {                     // if to the left is free
                        if (!map[level + 1][FL + 1]) {              // if to the left and down is free
                            FL++;                               // change falling position to left and continue falling
                        } else {                                // else if left side isn't viable for falling
                            if (!map[level][FL - 1]) {            // if to the right is free
                                if (!map[level + 1][FL - 1]) {  // if to the right and down is free
                                    FL--;
                                } else {
                                    map[level][FL] = true;
                                    New = true;
                                }
                            } else {
                                map[level][FL] = true;
                                New = true;
                            }
                        }
                    } else if (!map[level + 1][FL + 1]) {       // if to the left is not free -> check left down
                        FL++;
                    } else if (!map[level][FL - 1]) {                // if to the right is true
                        if (!map[level + 1][FL - 1]) {            // if to the right and down is free
                            FL--;                           // change falling position to right and continue falling
                        } else {
                            map[level][FL] = true;
                            New = true;
                        }
                    } else if (!map[level + 1][FL - 1]) {       // if to the right is not free -> check right down
                        FL--;
                    } else {
                        map[level][FL] = true;
                        New = true;
                    }
                }
            }
        } catch (Exception e) {
            System.out.println(units-1);
        }
    }
}
