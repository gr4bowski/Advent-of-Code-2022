import java.util.ArrayList;
import java.util.Scanner;

public class day7part1 {
    public void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ArrayList<Integer> files;
        ArrayList<Directory> directories;
//        files = new ArrayList<>();
//        directories = new ArrayList<>();
//        Directory dir = new Directory(files, directories);
//
//        int structureSize = dir.dirInside.size();
//        Structure s = new Structure(structureSize);
        int level;
        String nextLine = scanner.nextLine();
        while (!nextLine.isEmpty()) {
            String[] command = nextLine.split(" ");
            if (command[0].equals("$")) {
                if (command[1].equals("cd")) {

                }
            }
            nextLine = scanner.nextLine();
        }
    }

    class Structure {
        ArrayList<ArrayList<Directory>> struct;
        int nodes;

        Structure(int nodes) {
            nodes = this.nodes;
            struct = new ArrayList<ArrayList<Directory>>();
        }
        void addPath(int v, Directory u) {
            struct.get(v).add(u);
        }
        void printStructure() {
            for (int i = 0; i < nodes; i++) {
                System.out.println("Path"+i);
                for (Directory dir : struct.get(i))System.out.println(" -> " + dir);
            }
        }
    }
    public static class Directory {
        ArrayList<Integer> filesInside;
        ArrayList<Directory> dirInside;

        Directory(ArrayList<Integer> filesInside, ArrayList<Directory> dirInside) {
            this.filesInside = filesInside;
            this.dirInside = dirInside;
            }
        public int calculateMySize(Directory dir) {
            int sum = 0;
            if (!dir.filesInside.isEmpty()) {
                for (int i = 0; i < dir.filesInside.size(); i++) {
                    sum += dir.filesInside.get(i);
                }
            }
            if (!dir.dirInside.isEmpty()) {
                for (int j = 0; j < dir.dirInside.size(); j++) {
                    Directory toCalculate = new Directory(dir.dirInside.get(j).filesInside, dir.dirInside.get(j).dirInside);
                    sum += calculateMySize(toCalculate);
                }
            }
            return sum;
        }

    }
}
